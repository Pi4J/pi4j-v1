<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
        <version>1.3-SNAPSHOT</version>
	</parent>
	<artifactId>pi4j-distribution</artifactId>
	<name>Pi4J :: Distribution</name>
	<description>Packaged Pi4J Distributions</description>
	<packaging>deb</packaging>


	<!-- PROJECT DEPENDENCIES -->
	<dependencies>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-device</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-device</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-device</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-gpio-extension</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-gpio-extension</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-gpio-extension</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-example</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-example</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-example</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
	</dependencies>


    <properties>
        <timestamp>${maven.build.timestamp}</timestamp>
        <maven.build.timestamp.format>yyyy-MM-dd hh:mm:ss</maven.build.timestamp.format>
    </properties>

	<!-- BUILD INSTRUCTIONS -->
	<build>
        <extensions>
            <!-- Add support for the "deb" packaging -->
            <extension>
                <groupId>org.vafer</groupId>
                <artifactId>jdeb</artifactId>
            </extension>
        </extensions>

		<plugins>

			<!-- ACQUIRE DEPENDENCIES -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>

					<!-- DOWNLOAD LICENSE, README & NOTICE ARTIFACTS -->
					<execution>
						<id>copy-license</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-parent</artifactId>
									<version>${project.version}</version>
									<classifier>license</classifier>
									<type>txt</type>
									<overWrite>true</overWrite>
									<destFileName>LICENSE.txt</destFileName>
									<outputDirectory>${project.build.directory}/distro-contents</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-parent</artifactId>
									<version>${project.version}</version>
									<classifier>notice</classifier>
									<type>txt</type>
									<overWrite>true</overWrite>
									<destFileName>NOTICE.txt</destFileName>
									<outputDirectory>${project.build.directory}/distro-contents</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-parent</artifactId>
									<version>${project.version}</version>
									<classifier>readme</classifier>
									<type>md</type>
									<overWrite>true</overWrite>
									<destFileName>README.md</destFileName>
									<outputDirectory>${project.build.directory}/distro-contents</outputDirectory>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>

					<!-- DOWNLOAD LIBRARY ARTIFACTS -->
					<execution>
						<id>copy-dependencies</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/distro-contents/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<excludeTransitive>true</excludeTransitive>
							<stripVersion>true</stripVersion>
						</configuration>
					</execution>

					<!-- DOWNLOAD & EXTRACT EXAMPLE SOURCE ARTIFACTS -->
					<execution>
						<id>unpack-example-sources</id>
						<phase>process-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-example</artifactId>
									<version>${project.version}</version>
									<classifier>sources</classifier>
									<type>jar</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}/distro-contents/examples</outputDirectory>
									<includes>**/*.java,**/build,**/run</includes>
								</artifactItem>
							</artifactItems>
							<includes>**/*.java</includes>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>

				</executions>
			</plugin>

            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>
                <version>1.5.3</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <file>${basedir}/src/scripts/pi4j</file>
                    <outputFile>${project.build.directory}/distro-contents/bin/pi4j</outputFile>
                    <replacements>
                        <replacement>
                            <token>%PROJECT_VERSION%</token>
                            <value>${project.version}</value>
                        </replacement>
                        <replacement>
                            <token>%PROJECT_TIMESTAMP%</token>
                            <value>${timestamp}</value>
                        </replacement>
                    </replacements>
                </configuration>
            </plugin>

			<!-- CREATE DEBIAN (.DEB) PACKAGE -->
			<plugin>
				<artifactId>jdeb</artifactId>
				<groupId>org.vafer</groupId>
                <configuration>
                    <attach>true</attach>
                    <deb>${project.build.directory}/pi4j-${project.version}.deb</deb>
                    <installDir>/opt/pi4j</installDir>

                    <signPackage>${pi4j.gpg.sign}</signPackage>
                    <signMethod>dpkg-sig</signMethod>
                    <signRole>builder</signRole>

                    <!-- NOTE:
                        The "{pi4j.gpg.key}" property must be configured in your maven settings.xml file.
                        The "{pi4j.gpg.passphrase}" property must be configured in your maven settings.xml file.
                        (This is intended only for Pi4J public deployment)
                    -->
                    <key>${pi4j.gpg.key}</key>
                    <passphrase>${pi4j.gpg.passphrase}</passphrase>

                    <dataSet>
                        <data>
                            <src>${project.build.directory}/distro-contents/LICENSE.txt</src>
                            <dst>LICENSE</dst>
                            <type>file</type>
                            <dst>/opt/pi4j/LICENSE</dst>
                        </data>
                        <data>
                            <src>${project.build.directory}/distro-contents/NOTICE.txt</src>
                            <type>file</type>
                            <dst>/opt/pi4j/NOTICE</dst>
                        </data>
                        <data>
                            <src>${project.build.directory}/distro-contents/README.md</src>
                            <type>file</type>
                            <dst>/opt/pi4j/README</dst>
                        </data>
                        <data>
                            <src>${project.build.directory}/distro-contents/lib/pi4j-core.jar</src>
                            <type>file</type>
                            <dst>/opt/pi4j/lib/pi4j-core.jar</dst>
                        </data>
                        <data>
                            <src>${project.build.directory}/distro-contents/lib/pi4j-core.jar</src>
                            <type>file</type>
                            <dst>/opt/pi4j/lib/pi4j-core.jar</dst>
                        </data>
                        <data>
                            <src>${project.build.directory}/distro-contents/lib/pi4j-device.jar</src>
                            <type>file</type>
                            <dst>/opt/pi4j/lib/pi4j-device.jar</dst>
                        </data>
                        <data>
                            <src>${project.build.directory}/distro-contents/lib/pi4j-gpio-extension.jar</src>
                            <type>file</type>
                            <dst>/opt/pi4j/lib/pi4j-gpio-extension.jar</dst>
                        </data>
                        <data>
                            <src>${project.build.directory}/distro-contents/bin/pi4j</src>
                            <type>file</type>
                            <dst>/opt/pi4j/bin/pi4j</dst>
                            <mapper>
                                <type>perm</type>
                                <filemode>755</filemode>
                            </mapper>
                        </data>
                        <data>
                            <src>${project.build.directory}/distro-contents/examples</src>
                            <type>directory</type>
                            <mapper>
                                <type>perm</type>
                                <prefix>/opt/pi4j/examples</prefix>
                                <filemode>666</filemode>
                            </mapper>
                        </data>
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/build</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/build</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/bananapi/build</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/bananapi/build</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/bananapro/build</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/bananapro/build</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/odroid/c1/build</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/odroid/c1/build</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/odroid/xu4/build</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/odroid/xu4/build</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/run</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/run</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/bananapi/run</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/bananapi/run</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/bananapro/run</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/bananapro/run</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/odroid/c1/run</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/odroid/c1/run</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->
                        <!--<data>-->
                            <!--<src>${project.build.directory}/distro-contents/examples/odroid/xu4/run</src>-->
                            <!--<type>file</type>-->
                            <!--<dst>/opt/pi4j/examples/odroid/xu4/run</dst>-->
                            <!--<mapper>-->
                                <!--<type>perm</type>-->
                                <!--<filemode>755</filemode>-->
                            <!--</mapper>-->
                        <!--</data>-->

                    </dataSet>
                </configuration>
			</plugin>

			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

                    <!-- ENSURE ALL LINE ENDINGS ARE <LF> ONLY FOR TEXT BASED FILES -->
                    <execution>
                        <id>create-target-distro-directories</id>
                        <phase>initialize</phase>
                        <configuration>
                            <tasks>
                                <mkdir dir="${project.build.directory}/distro-contents/bin"/>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>

                    <!-- ENSURE ALL LINE ENDINGS ARE <LF> ONLY FOR TEXT BASED FILES -->
                    <execution>
                        <id>ant-fix-line-endings</id>
                        <phase>prepare-package</phase>
                        <configuration>
                            <tasks>
                                <fixcrlf srcdir="${project.build.directory}/distro-contents"
                                         eol="unix"
                                         excludes="**/*.jar" />
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>

                    <!-- OPTIONALLY DEPLOY THE FINAL .DEB TO THE RASPBERRY PI -->
					<!-- copy the compiled JAR file to the Raspberry Pi platform platform -->
					<execution>
						<id>transfer-packaged-pi4j-deb</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<if>
									<equals arg1="${pi4j.dev.transfer}" arg2="true" />
									<then>
										<!-- ensure the target directory exists on the Raspberry Pi -->
										<sshexec host="${pi4j.dev.host}" port="${pi4j.dev.port}" username="${pi4j.dev.user}"
											password="${pi4j.dev.password}" trust="true" failonerror="false"
											verbose="true" command="mkdir --parents ${pi4j.dev.directory}" />

										<!-- copy the DEB file to the Raspberry Pi -->
										<scp
											file="${project.build.directory}/pi4j-${project.version}.deb"
											remoteTofile="${pi4j.dev.user}:${pi4j.dev.password}@${pi4j.dev.host}:${pi4j.dev.directory}/pi4j.deb"
											port="${pi4j.dev.port}" trust="true" verbose="true" failonerror="true">
										</scp>
									</then>
								</if>
							</tasks>
						</configuration>
					</execution>
				</executions>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant-jsch</artifactId>
                        <version>${ant-jsch.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.jcraft</groupId>
                        <artifactId>jsch</artifactId>
                        <version>${jsch.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>ant-contrib</groupId>
                        <artifactId>ant-contrib</artifactId>
                        <version>${ant-contrib.version}</version>
                    </dependency>
                </dependencies>
			</plugin>

			<!-- CREATE .ZIP PACKAGE OF Pi4J DISTRIBUTION -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<appendAssemblyId>false</appendAssemblyId>
					<tarLongFileMode>posix</tarLongFileMode>
					<finalName>pi4j-${project.version}</finalName>
					<descriptors>
				    	<descriptor>src/assembly/distribution.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-distribution-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
        		</executions>
			</plugin>
		</plugins>
	</build>

    <profiles>

        <!-- SPECIAL PROFILE FOR PUBLISHING DOWNLOAD ARTIFACTS -->
        <profile>
            <id>deploy-downloads</id>
            <activation>
                <property>
                    <name>release-build</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- this plugin will upload the ZIP and DEB packages to the public
                         Pi4J downloads URL for the website.
                         https://pi4j.com/download
                         The "{pi4j.aws.access.key}" property must be configured in your maven settings.xml file.
                         The "{pi4j.aws.secret.key}" property must be configured in your maven settings.xml file.
                         (This is intended only for Pi4J public deployment)
                     -->
                    <plugin>
                        <groupId>com.bazaarvoice.maven.plugins</groupId>
                        <artifactId>s3-upload-maven-plugin</artifactId>
                        <configuration>
                            <recursive>false</recursive>
                            <bucketName>pi4j.com</bucketName>
                            <accessKey>${pi4j.aws.access.key}</accessKey>
                            <secretKey>${pi4j.aws.secret.key}</secretKey>
                        </configuration>
                        <executions>
                            <execution>
                                <id>deploy-pi4-zip-package</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>s3-upload</goal>
                                </goals>
                                <configuration>
                                    <source>${project.build.directory}/pi4j-${project.version}.zip</source>
                                    <destination>download/pi4j-${project.version}.zip</destination>
                                </configuration>
                            </execution>
                            <execution>
                                <id>deploy-pi4-deb-package</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>s3-upload</goal>
                                </goals>
                                <configuration>
                                    <source>${project.build.directory}/pi4j-${project.version}.deb</source>
                                    <destination>download/pi4j-${project.version}.deb</destination>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- BUILDING THIS PROFILE WILL DEPLOY THE INSTALL/UNINSTALL SCRIPT TO pi4j.com -->
        <!-- BUILDING THIS PROFILE WILL DEPLOY THE APT PACKAGE TO repository.pi4j.com -->
        <profile>
            <id>deploy-apt-package</id>
            <!--<activation>-->
                <!--<property>-->
                    <!--<name>release-build</name>-->
                <!--</property>-->
            <!--</activation>-->
            <build>
                <plugins>
                    <!-- this plugin will upload the GPG public key file, the Pi4J APT
                         repo list file, the install script and uninstall script to
                         https://pi4j.com

                         The "{pi4j.aws.access.key}" property must be configured in your maven settings.xml file.
                         The "{pi4j.aws.secret.key}" property must be configured in your maven settings.xml file.
                         (This is intended only for Pi4J public deployment)
                     -->
                    <plugin>
                        <groupId>com.bazaarvoice.maven.plugins</groupId>
                        <artifactId>s3-upload-maven-plugin</artifactId>
                        <configuration>
                            <recursive>false</recursive>
                            <bucketName>pi4j.com</bucketName>
                            <accessKey>${pi4j.aws.access.key}</accessKey>
                            <secretKey>${pi4j.aws.secret.key}</secretKey>
                        </configuration>
                        <executions>
                            <execution>
                                <id>deploy-pi4-gpg-public-key</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>s3-upload</goal>
                                </goals>
                                <configuration>
                                    <source>${basedir}/src/scripts/pi4j.gpg</source>
                                    <destination>pi4j.gpg</destination>
                                </configuration>
                            </execution>
                            <execution>
                                <id>deploy-pi4j-apt-repo-list</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>s3-upload</goal>
                                </goals>
                                <configuration>
                                    <source>${basedir}/src/scripts/pi4j.list</source>
                                    <destination>pi4j.list</destination>
                                </configuration>
                            </execution>
                            <execution>
                                <id>deploy-pi4j-install-script</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>s3-upload</goal>
                                </goals>
                                <configuration>
                                    <source>${basedir}/src/scripts/install</source>
                                    <destination>install</destination>
                                </configuration>
                            </execution>
                            <execution>
                                <id>deploy-pi4j-uninstall-script</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>s3-upload</goal>
                                </goals>
                                <configuration>
                                    <source>${basedir}/src/scripts/uninstall</source>
                                    <destination>uninstall</destination>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- This plugin will build the APT repo package and upload it to:
                         http://repository.pi4j.com.

                         Please note that this plugin requires that the "deb-s3" Ruby GEM is
                         install on the build computer.  More details here:
                         https://github.com/krobertson/deb-s3

                         Also, note that executing this plugin also requires that GPG is installed
                         and the Pi4J GPG passphrase is known.  The user will be prompted to provide the
                         GPG passphrase. (This is intended only for Pi4J public deployment)

                         The "{pi4j.gpg.key}" property must be configured in your maven settings.xml file.
                         The "{pi4j.aws.access.key}" property must be configured in your maven settings.xml file.
                         The "{pi4j.aws.secret.key}" property must be configured in your maven settings.xml file.
                         (This is intended only for Pi4J public deployment)
                         -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>deploy-pi4j-apt-repo-package</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>deb-s3</executable>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <arguments>
                                        <argument>upload</argument>
                                        <argument>--arch=armhf</argument>
                                        <argument>--codename=wheezy</argument>
                                        <argument>--component=rpi</argument>
                                        <argument>--sign=${pi4j.gpg.key}</argument>
                                        <argument>--access-key-id=${pi4j.aws.access.key}</argument>
                                        <argument>--secret-access-key=${pi4j.aws.secret.key}</argument>
                                        <argument>--bucket=repository.pi4j.com</argument>
                                        <argument>${project.build.directory}/pi4j-${project.version}.deb</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
