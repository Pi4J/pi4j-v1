            ------
            Home
            ------
            ------
             YYYY-MM-DD
            ------

Welcome to Pi4J!

  This project is intended to provide a friendly object-oriented I/O API and implementation libraries for Java
  Programmers to access the full I/O capabilities of the Raspberry Pi platform.
  This project abstracts the low-level native integration and interrupt monitoring to enable Java programmers to focus
  on implementing their application business logic.

* News / Announcements

  [2019-02-26]

  Version 1.2 has been released and is now available for download. ({{{./download.html}Downloads}} | {{{./install.html}Installation}})
  This is the active development version where you can find the latest fixes and updates.

  Latest Development Updates:

    * Added support for {{{./pins/model-3a-plus-rev1.html}Raspberry Pi 3A+}}

    * Added support for {{{./pins/model-3b-plus-rev1.html}Raspberry Pi 3B+}}

    * Added support for {{{./pins/model-zerow-rev1.html}Raspberry Pi Zero W}}

    * Added support for {{{./pins/model-cm3-plus-rev1.html}Raspberry Pi Compute Module 3+}}

    * Added support for {{{./pins/model-cm3-rev1.html}Raspberry Pi Compute Module 3}}

    * Added experimental support for {{{https://github.com/Pi4J/pi4j/issues/230}OrangePi}} platform.

    * Added experimental support for {{{https://github.com/Pi4J/pi4j/issues/337}Synovoip BPI (BananaPi)}} platform.

    * Added experimental support for {{{https://github.com/Pi4J/pi4j/issues/279}NanoPi}} platform.

    * Updated to Java 8 runtime

   Additional details can be found in the project's {{{https://github.com/Pi4J/pi4j/blob/master/README.md}README}}.

* Project Status

  Please note that this project is continually under development but has been very stable for several years.  The
  functionality is very stable but improvements and bug fixes are continually committed into the '{{{https://github.com/Pi4J/pi4j/tree/master}master}}' branch in
  the Pi4J GitHub repository and SNAPSHOT builds are published in the {{{./download.html#Maven_Repository}Sonatype OSS repository}}.

  You are welcome to start using and integrating this library in your project.  Please provide any feedback good, bad
  or ugly.  <(Well maybe keep the ugly feedback to a minimum.)>

  Visit the {{{./download.html}Downloads}} page to download the latest Pi4J library builds.

* Supported Hardware

  * {{{./pins/model-a-rev2.html}Raspberry Pi - A}}

  * {{{./pins/model-b-rev1.html}Raspberry Pi - B (Revision 1)}}

  * {{{./pins/model-b-rev2.html}Raspberry Pi - B (Revision 2)}}

  * {{{./pins/model-a-plus.html}Raspberry Pi - A+}}

  * {{{./pins/model-b-plus.html}Raspberry Pi - B+}}

  * {{{./pins/model-2b-rev1.html}Raspberry Pi - 2B}}

  * {{{./pins/model-3b-rev1.html}Raspberry Pi - 3B}}

  * {{{./pins/model-3b-plus-rev1.html}Raspberry Pi - 3B+}}

  * {{{./pins/model-3a-plus-rev1.html}Raspberry Pi - 3A+}}

  * {{{./pins/model-zero-rev1.html}Raspberry Pi - Zero}}

  * {{{./pins/model-zerow-rev1.html}Raspberry Pi - Zero W}}

  * {{{./pins/model-cm-rev1.html}Raspberry Pi - CM1 (Compute Module)}}

  * {{{./pins/model-cm3-rev1.html}Raspberry Pi - CM3 (Compute Module)}}

  * {{{./pins/model-cm3-plus-rev1.html}Raspberry Pi - CM3+ (Compute Module)}}

  * {{{./pins/lemaker-bananapi.html}LeMaker - BananaPi}}

  * {{{./pins/lemaker-bananapi.html}LeMaker - BananaPro}}

  * {{{./pins/odroid-c1.html}Odroid - C1/C1+}}

  * {{{./pins/odroid-xu4.html}Odroid - XU4}}

* Features

  * Export & unexport GPIO pins

  * Configure GPIO pin direction

  * Configure GPIO pin edge detection

  * Control/write GPIO pin states

  * Pulse GPIO pin state

  * Read GPIO pin states

  * Listen for GPIO pin state changes (interrupt-based; not polling)

  * Automatically set GPIO states on program termination (GPIO shutdown)

  * Triggers for automation based on pin state changes

  * Send & receive data via RS232 serial communication

  * I2C Communication

  * SPI Communication

  * Extensible GPIO Provider interface to add GPIO capacity via expansion boards

  * Access system information and network information from the Raspberry Pi

  * Wrapper classes for direct access to WiringPi Library from Java

* Getting Started

  The simplest method to install Pi4J on your RaspberryPi is to execute the following command directly on your RaspberryPi.\
  <<<curl -sSL https://pi4j.com/install | sudo bash>>>

  To get started using the Pi4J library, please see the following pages:

  * {{{./install.html}Installation}}

  * {{{./usage.html}Usage}}

* Examples

  Review each of the following examples to explore the functionality provided by the Pi4j library.

  * {{{./example/control.html}Control GPIO}}

  * {{{./example/listener.html}Listen for GPIO Events}}

  * {{{./example/shutdown.html}Shutdown GPIO}}

  * {{{./example/trigger.html}Trigger GPIO on Events}}

  * {{{./example/serial.html}Serial Communication}}

  * {{{./example/system-info.html}System/Network Information}}

