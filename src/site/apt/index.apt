            ------
            Home
            ------
            ------
             YYYY-MM-DD
            ------

Welcome to Pi4J!

  This project is intended to provide a friendly object-oriented I/O API and implementation libraries for Java
  Programmers to access the full I/O capabilities of the Raspberry Pi platform.
  This project abstracts the low-level native integration and interrupt monitoring to enable Java programmers to focus
  on implementing their application business logic.

* News / Announcements

  [2018-04-23]

  Version 1.2-SNAPSHOT is available for download. ({{{./download.html}Downloads}} | {{{./install.html}Installation}})
  This is the active development version where you can find the latest fixes and updates.

  Latest Development Updates:

    * Added support for {{{./pins/model-3b-plus-rev1.html}Raspberry Pi 3B+}}

    * Added support for {{{./pins/model-zerow-rev1.html}Raspberry Pi Zero W}}

    * Added support for {{{./pins/model-cm-rev1.html}Raspberry Pi Compute Module 3}}

    * Added experimental support for {{{https://github.com/Pi4J/pi4j/issues/230}OrangePi}} platform.

    * Added experimental support for {{{https://github.com/Pi4J/pi4j/issues/337}Synovoip BPI (BananaPi)}} platform.

    * Added experimental support for {{{https://github.com/Pi4J/pi4j/issues/279}NanoPi}} platform.

    * Updated to Java 8 runtime

   Additional details can be found in the project's {{{https://github.com/Pi4J/pi4j/blob/master/README.md}README}}.

  [2016-07-26]

  Version 1.1 has been released and is now available for download. ({{{./download.html}Downloads}} | {{{./install.html}Installation}})

  New Feature Highlights:

    * Added support for {{{./pins/model-3b-rev1.html}Raspberry Pi 3 - Model B}}

    * Added support for {{{./pins/model-zero-rev1.html}Raspberry Pi Zero}}

    * Added support for {{{./pins/lemaker-bananapi.html}BananaPi platform}}

    * Added support for {{{./pins/lemaker-bananapro.html}BananaPro platform}}

    * Added support for {{{./pins/odroid-c1.html}Odroid C1/C1+}}

    * Added support for {{{./pins/odroid-xu4.html}Odroid XU4}}

    * Updated to Java 7 runtime

    * Added support for enabling non-privileged GPIO access via the Pi4J APIs (no 'sudo' required) \
    (see: {{{http://www.savagehomeautomation.com/projects/pi4j-now-supports-non-privileged-access-no-more-rootsudo.html}Pi4J GPIO Non-Privileged Access}})

    * Added optimizations for GPIO state change latency

    * Added cross-compiler support in Maven build

    * Added new Serial JNI implementation to support advanced serial configuration/operations

  In addition to maintenance and bug fixes, the 1.1 release includes a completely overhauled Serial communication API
  and implementation.  Please note that to add these serial API enhancements some APIs required breaking changes where
  they may no longer be backwards compatible with prior versions.

  New development and bug fixes will now be provided via the 1.2-SNAPSHOT builds and the latest development codebase
  is now maintained in the '{{{https://github.com/Pi4J/pi4j/tree/master}master}}' branch.


* Project Status

  Please note that this project is continually under development but has been very stable for several years.  The
  functionality is very stable but improvements and bug fixes are continually committed into the '{{{https://github.com/Pi4J/pi4j/tree/master}master}}' branch in
  the Pi4J GitHub repository and SNAPSHOT builds are published in the {{{./download.html#Maven_Repository}Sonatype OSS repository}}.

  You are welcome to start using and integrating this library in your project.  Please provide any feedback good, bad
  or ugly.  <(Well maybe keep the ugly feedback to a minimum.)>

  Visit the {{{./download.html}Downloads}} page to download the latest Pi4J library builds.

* Supported Hardware

  * {{{./pins/model-a-rev2.html}Raspberry Pi - Model A}}

  * {{{./pins/model-b-rev1.html}Raspberry Pi - Model B (Revision 1)}}

  * {{{./pins/model-b-rev2.html}Raspberry Pi - Model B (Revision 2)}}

  * {{{./pins/model-a-plus.html}Raspberry Pi - Model A+}}

  * {{{./pins/model-b-plus.html}Raspberry Pi - Model B+}}

  * {{{./pins/model-cm-rev1.html}Raspberry Pi - Compute Module}}

  * {{{./pins/model-2b-rev1.html}Raspberry Pi 2 - Model B}}

  * {{{./pins/model-3b-rev1.html}Raspberry Pi 3 - Model B}}

  * {{{./pins/model-zero-rev1.html}Raspberry Pi Zero}}

  * {{{./pins/lemaker-bananapi.html}LeMaker BananaPi}}

  * {{{./pins/lemaker-bananapi.html}LeMaker BananaPro}}

  * {{{./pins/odroid-c1.html}Odroid C1/C1+}}

  * {{{./pins/odroid-xu4.html}Odroid XU4}}

* Features

  * Export & unexport GPIO pins

  * Configure GPIO pin direction

  * Configure GPIO pin edge detection

  * Control/write GPIO pin states

  * Pulse GPIO pin state

  * Read GPIO pin states

  * Listen for GPIO pin state changes (interrupt-based; not polling)

  * Automatically set GPIO states on program termination (GPIO shutdown)

  * Triggers for automation based on pin state changes

  * Send & receive data via RS232 serial communication

  * I2C Communication

  * SPI Communication

  * Extensible GPIO Provider interface to add GPIO capacity via expansion boards

  * Access system information and network information from the Raspberry Pi

  * Wrapper classes for direct access to WiringPi Library from Java

* Getting Started

  The simplest method to install Pi4J on your RaspberryPi is to execute the following command directly on your RaspberryPi.\
  <<<curl -s get.pi4j.com | sudo bash>>>

  To get started using the Pi4J library, please see the following pages:

  * {{{./install.html}Installation}}

  * {{{./usage.html}Usage}}

* Examples

  Review each of the following examples to explore the functionality provided by the Pi4j library.

  * {{{./example/control.html}Control GPIO}}

  * {{{./example/listener.html}Listen for GPIO Events}}

  * {{{./example/shutdown.html}Shutdown GPIO}}

  * {{{./example/trigger.html}Trigger GPIO on Events}}

  * {{{./example/serial.html}Serial Communication}}

  * {{{./example/system-info.html}System/Network Information}}

